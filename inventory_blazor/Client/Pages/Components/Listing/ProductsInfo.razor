@using inventory_blazor.Shared.Models
@inject HttpClient HttpClient

<div>
    @if (products != null && products.Any())
    {
        @foreach (var product in products)
        {
            var category = categories.FirstOrDefault(c => c.Cid == product.Cid);
            var store = stores.FirstOrDefault(s => s.Sid == product.Sid);

            <div class="w-full productItem" data-product-name="@product.Pname">
                <div class="w-[90%] mx-auto rounded-lg bg-[#1e1f23] text-[#adadad] flex mt-12 text-center h-16 items-center shadow-lg hover:contrast-125 transition ease-in-out duration-300 cursor-pointer">
                    <h5 class="w-[18%]">@product.Pid</h5>
                    <h5 class="w-[18%]">@product.Pname</h5>
                    <h5 class="w-[18%]">@product.PStock</h5>
                    <h5 class="w-[18%]">@product.AddedDate.ToShortDateString()</h5>
                    <h5 class="w-[18%]">$@product.Price</h5>
                    <h5 class="w-[18%]">@category?.Category_name</h5>
                    <h5 class="w-[18%]">@store?.Address</h5>
                    <div class="w-[18%] flex justify-center items-center gap-2">
                        <a href="/edit-product/@product.Pid" class="bg-[#33E67A] font-bold rounded-lg text-black px-3 text-xs py-1">
                            Edit
                        </a>
                           <button @onclick="() => DeleteProduct(product.Pid)" class="bg-[#33E67A] font-bold rounded-lg text-black px-3 text-xs py-1">
                            Delete
                        </button>
                    </div>
                </div>
            </div>
        }
    }
    else
    {
        <p>No products available.</p>
    }
</div>

@code {
    private List<Product> products;
    private List<Category> categories;
    private List<Store> stores;

    protected override async Task OnInitializedAsync()  
    {
        try
        {
            products = await HttpClient.GetFromJsonAsync<List<Product>>("api/Product");
            categories = await HttpClient.GetFromJsonAsync<List<Category>>("api/Category");
            stores = await HttpClient.GetFromJsonAsync<List<Store>>("api/store");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error retrieving products: {ex.Message}");
        }
    }

     private async Task DeleteProduct(int productId)
    {
        try
        {
            // Send the DELETE request to delete the product
            var response = await HttpClient.DeleteAsync($"api/Product/{productId}");
            if (!response.IsSuccessStatusCode)
            {
                Console.WriteLine($"HTTP request failed with status code: {response.StatusCode}");
                return;
            }

            // Remove the deleted product from the list
            products.RemoveAll(p => p.Pid == productId);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting product: {ex.Message}");
        }
    }
}
