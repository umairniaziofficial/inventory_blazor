@page "/edit/{productId}"
@using inventory_blazor.Shared.Models
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager

<NavBar />

<div class="min-h-screen flex justify-center items-center py-12">
    <div class="w-[90%] h-[90%] p-8 rounded-lg shadow-lg flex flex-col justify-center items-center">
        <h1 class="text-5xl text-white mb-8">Edit Product</h1>

        @if (product != null)
        {
            <form @onsubmit="HandleSubmit" enctype="multipart/form-data" class="space-y-4 w-full max-w-md">
                <div>
                    <label for="cid" class="text-white">Category:</label>
                    <select id="cid" name="cid" required class="mt-1 px-3 py-2 bg-[#41444d] text-white rounded-lg w-full outline-none">
                        @foreach (var category in categories)
                        {
                            <option value="@category.Cid">@category.Category_name</option>
                        }
                    </select>
                </div>

                <div>
                    <label for="bid" class="text-white">Brand ID:</label>
                    <select id="bid" name="bid" required class="mt-1 px-3 py-2 bg-[#41444d] text-white rounded-lg w-full outline-none">
                        @foreach (var brand in brands)
                        {
                            <option value="@brand.Bid">@brand.Bname</option>
                        }
                    </select>
                </div>

                <div>
                    <label for="sid" class="text-white">Store:</label>
                    <select id="sid" name="sid" required class="mt-1 px-3 py-2 bg-[#41444d] text-white rounded-lg w-full outline-none">
                        @foreach (var store in stores)
                        {
                            <option value="@store.Sid">@store.Address</option>
                        }
                    </select>
                </div>

                <div>
                    <label for="pname" class="text-white">Product Name:</label>
                    <input type="text" id="pname" name="pname" required class="mt-1 px-3 py-2 bg-[#41444d] text-white rounded-lg w-full outline-none" @bind="product.Pname" />
                </div>

                <div>
                    <label for="p_stock" class="text-white">Stock Quantity:</label>
                    <input type="number" id="p_stock" name="p_stock" required class="mt-1 px-3 py-2 bg-[#41444d] text-white rounded-lg w-full outline-none" @bind="product.PStock" />
                </div>

                <div>
                    <label for="price" class="text-white">Price:</label>
                    <input type="number" id="price" name="price" required class="mt-1 px-3 py-2 bg-[#41444d] text-white rounded-lg w-full outline-none" @bind="product.Price" />
                </div>

                <div>
                    <label for="added_date" class="text-white">Added Date:</label>
                    <input type="date" id="added_date" name="added_date" required class="mt-1 px-3 py-2 bg-[#41444d] text-white rounded-lg w-full outline-none" @bind="product.AddedDate" />
                </div>

                <div>
                    <label for="productImage" class="text-white">Product Image:</label>
                    <input type="file" id="productImage" name="productImage" accept="image/*" class="mt-1" />
                </div>

                <button type="submit" class="bg-[#33e67a] hover:bg-[#30995a] text-black font-bold py-2 px-4 rounded w-full">
                    Submit
                </button>
            </form>
        }
        else
        {
            <p>No product found.</p>
        }
    </div>
</div>

@code {
    private Product product;
    private List<Category> categories;
    private List<Store> stores;
    private List<Brand> brands;
    private int productId;

    protected override async Task OnInitializedAsync()
    {
        productId = Convert.ToInt32(NavigationManager.Uri.Split('/').Last());
        try
        {
            product = await HttpClient.GetFromJsonAsync<Product>($"api/Product/{productId}");
            categories = await HttpClient.GetFromJsonAsync<List<Category>>("api/Category");
            stores = await HttpClient
.GetFromJsonAsync<List<Store>>("api/store");
            brands = await HttpClient.GetFromJsonAsync<List<Brand>>("api/brand");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error retrieving product: {ex.Message}");
        }
    }

    private async Task HandleSubmit()
    {
        try
        {
            await HttpClient.PutAsJsonAsync($"api/Product/{productId}", product);
            NavigationManager.NavigateTo("/");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating product: {ex.Message}");
        }
    }
}
